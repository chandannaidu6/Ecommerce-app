// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id@default(cuid())
  name String?
  email String  @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  cart Cart?
  orders Order[]
  notifications  Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt




}

model Account{
  id String @id@default(cuid())
  userId String
  type  String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([provider,providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier   String
  token        String   @unique
  expires      DateTime

  @@unique([identifier, token])
}
model Category{
  id  Int @id@default(autoincrement())
  name String
  description String?
  products Product[]

  
  @@map("categories")

}

model Product{
  id  Int @id@default(autoincrement())
  name String
  description String?
  price Float
  sku String @unique
  categoryId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  category  Category? @relation(fields:[categoryId], references: [id])
  images    ProductImage[]
  inventory  Inventory?
  cartItems  CartItem[]
  orderItems  OrderItem[]

  @@index([name],map:"product_name_idx")
}

model ProductImage{
  id Int @id@default(autoincrement())
  url String
  productId Int

  product Product @relation(fields:[productId],references:[id])
}

model Inventory{
  id Int @id@default(autoincrement())
  productId Int @unique
  quantity  Int 

  product Product @relation(fields:[productId],references: [id])
}

model Cart{
  id Int @id@default(autoincrement())
  userId String @unique

  user User @relation(fields: [userId],references: [id])
  cartItem  CartItem[]
}

model CartItem{
  id Int @id@default(autoincrement())
  cartId  Int
  productId Int
  quantity  Int @default(1)

  cart  Cart  @relation(fields: [cartId],references: [id])
  product Product @relation(fields: [productId],references: [id])
  @@unique([cartId, productId])
}

model Order{
  id Int @id@default(autoincrement())
  userId String 
  total Float
  status  String @default("PENDING")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  orderItems  OrderItem[]
  payment Payment?
}

model OrderItem{
  id  Int @id@default(autoincrement())
  orderId Int
  productId Int
  quantity  Int @default(1)
  price Float

  order Order @relation(fields:[orderId],references: [id])
  product Product @relation(fields:[productId],references: [id])
}

model Payment{
  id  Int @id@default(autoincrement())
  orderId Int @unique
  paymentMethod String
  amount  Float
  status  String
  transactionId String?
  createdAt DateTime  @default(now())

  order Order @relation(fields: [orderId],references: [id],onDelete: Cascade)

}

model Notification{
  id Int @id@default(autoincrement())
  userId String
  type String
  message String
  read Boolean  @default(false)
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}